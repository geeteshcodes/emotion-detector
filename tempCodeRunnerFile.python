import cv2
import tensorflow as tf
import numpy as np
import time

# Load model
model = tf.keras.models.load_model('model_ml.h5')
class_names = ['Angry','Disgust','Fear','Happy','Sad','Surprise']

# Initialize webcam
cap = cv2.VideoCapture(0)

# Load Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

last_prediction_time = 0
emotion = "Neutral"  # initial label
interval = 1  # seconds

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
    
    current_time = time.time()
    
    for (x, y, w, h) in faces:
        # Only predict every 'interval' seconds
        if current_time - last_prediction_time >= interval:
            face_img = gray[y:y+h, x:x+w]
            face_img = cv2.resize(face_img, (48,48))
            face_img = face_img / 255.0
            face_img = np.expand_dims(face_img, axis=0)
            face_img = np.expand_dims(face_img, axis=-1)
            
            preds = model.predict(face_img)
            emotion = class_names[np.argmax(preds)]
            last_prediction_time = current_time  # update time

        # Draw bounding box and label
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0,255,0), 2)
        cv2.putText(frame, emotion, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0,255,0), 2)

    cv2.imshow('Webcam Emotion Detector', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
